Properties:
  # WebStatusCode
  - name: WebStatusCode
    code: "{WebStatusCode}"
    details:
      Ok: "`200`"
      Created: "`201`"
      NoContent: "`204`"
      BadRequest: "`400`"
      Unauthorized: "`401`"
      Forbidden: "`403`"
      NotFound: "`404`"
      RequestTimeout: "`408`"
      UnsupportedMediaType: "`415`"
      InternalServerError: "`500`"
      BadGateway: "`502`"
      ServiceUnavailable: "`503`"
      GatewayTimeout: "`504`"
    description:
      Helper for common http status codes.
      (Use underlying status code for any codes not listed)
    example: |
      Dim Response As WebResponse

      If Response.StatusCode = WebStatusCode.Ok Then
        ' Ok
      ElseIf Response.StatusCode = 418 Then
        ' I'm a teapot
      End If

  # WebMethod
  - name: WebMethod
    code: "{WebMethod}"
    details:
      HttpGet: "`0`"
      HttpPost: "`1`"
      HttpPut: "`2`"
      HttpDelete: "`3`"
      HttpPatch: "`4`"

  # WebFormat
  - name: WebFormat
    code: "{WebFormat}"
    details:
      PlainText: "`0`"
      Json: "`1`"
      FormUrlEncoded: "`2`"
      Xml: "`3`"
      Custom: "`4`"

  # UrlEncodingMode
  - name: UrlEncodingMode
    code: "{UrlEncodingMode}"
    details:
      StrictUrlEncoding: "`0`"
      FormUrlEncoding: "`1`"
      QueryUrlEncoding: "`2`"
      CookieUrlEncoding: "`3`"
      PathUrlEncoding: "`4`"
    description: |
      - `StrictUrlEncoding` uses [RFC 3986](https://tools.ietf.org/html/rfc3986) and is the default
      - `FormUrlEncoding` uses HTML5 form url-encoding and is used with `WebFormat.FormUrlEncoded`
      - `QueryUrlEncoding` uses subset of `Strict` and `Form` for default querystring encoding
      - `CookieUrlEncoding` uses [RFC 6265](https://tools.ietf.org/html/rfc6265)
      - `PathUrlEncoding` uses "pchar" from [RFC 3986](https://tools.ietf.org/html/rfc3986) and is the default

  # EnableLogging
  - name: EnableLogging
    code: "Get|Let {Boolean}"
    description: |
      Enable logging of requests and responses and other internal messages from VBA-Web.
      Should be the first step in debugging VBA-Web if something isn't working as expected.
      (Logs display in Immediate Window (`View > Immediate Window` or `ctrl+g`)
    example: |
      Dim Client As New WebClient
      Client.BaseUrl = "https://api.example.com/v1/"

      Dim RequestWithTypo As New WebRequest
      RequestWithTypo.Resource = "peeple/{id}"
      RequestWithType.AddUrlSegment "idd", 123

      ' Enable logging before the request is executed
      WebHelpers.EnableLogging = True

      Dim Response As WebResponse
      Set Response = Client.Execute(Request)

      ' Immediate window:
      ' --> Request - (Time)
      ' GET https://api.example.com/v1/peeple/{id}
      ' Headers...
      '
      ' <-- Response - (Time)
      ' 404 ...

Methods:
  # LogDebug
  - name: LogDebug
    code: "LogDebug(Message, [From])"
    details:
      Message: "`{String}`"
      From: "`{String}` _Optional_"
    description: |
      Log message (when logging is enabled with `EnableLogging`)
      with optional location where the message is coming from.
      Useful when writing extensions to VBA-Web (like an `IWebAuthenticator`).
    example: |
      LogDebug "Executing request..."
      ' -> VBA-Web: Executing request...

      LogDebug "Executing request...", "Module.Function"
      ' -> Module.Function: Executing request...

  # LogWarning
  - name: LogWarning
    code: "LogWarning(Message, [From])"
    details:
      Message: "`{String}`"
      From: "`{String}` _Optional_"
    description: |
      Log warning (even when logging is disabled with `EnableLogging`)
      with optional location where the message is coming from.
      Useful when writing extensions to VBA-Web (like an `IWebAuthenticator`).
    example: |
      WebHelpers.LogWarning "Something could go wrong"
      ' -> WARNING - VBA-Web: Something could go wrong

      WebHelpers.LogWarning "Something could go wrong", "Module.Function"
      ' -> WARNING - Module.Function: Something could go wrong

  # LogError
  - name: LogError
    code: "LogError(Message, [From], [ErrNumber])"
    details:
      Message: "`{String}`"
      From: "`{String}` _Optional_"
      ErrNumber: "`{Long}` _Optional_"
    description: |
      Log error (even when logging is disabled with `EnableLogging`)
      with optional location where the message is coming from and error number.
      Useful when writing extensions to VBA-Web
      (like an `IWebAuthenticator`).
    example: |
      WebHelpers.LogError "Something went wrong"
      ' -> ERROR - VBA-Web: Something went wrong

      WebHelpers.LogError "Something went wrong", "Module.Function"
      ' -> ERROR - Module.Function: Something went wrong

      WebHelpers.LogError "Something went wrong", "Module.Function", 100
      ' -> ERROR - Module.Function: 100, Something went wrong

  # LogRequest
  - name: LogRequest
    code: "LogRequest(Client, Request)"
    details:
      Client: "`{WebClient}`"
      Request: "`{WebRequest}`"
    description: |
      Log details of the request (Url, headers, cookies, body, etc.).

  # LogResponse
  - name: LogResponse
    code: "LogResponse(Response)"
    details:
      Response: "`{WebResponse}`"
    description: |
      Log the given string along with the current time specified to the millisecond.  Optionally log a newline immediately following. 

  # LogWithTime
  - name: LogWithTime
    code: "LogWithTime(Message, [NewLine])"
    details:
      Message: "`{String}`"
      NewLine: "`{Boolean}` _Optional_"
    description: |
      Log details of the response (Status, headers, content, etc.).

  # Obfuscate
  - name: Obfuscate
    code: "Obfuscate(Secure, [Character])"
    details:
      Secure: "`{String}` Message to obfuscate"
      Character: "`{String}` _Optional_ Character to obfuscate with (\"*\" is default)"
    description: |
      Obfuscate any secure information before logging.
    example: |
      Dim Password As String
      Password = "Secret"

      LogDebug "Password = " & Obfuscate(Password)
      ' -> Password = ******

  # ParseJson
  - name: ParseJson
    code: "ParseJson(Value) {Object}"
    details:
      Value: "`{String}` JSON value to parse"
    description: |
      Parse JSON value to `Dictionary` if it's an object or `Collection` if it's an array.

  # ConvertToJson
  - name: ConvertToJson
    code: "ConvertToJson(Value, [Whitespace]) {String}"
    details:
      Value: "`{Variant}` `Dictionary`, `Collection`, or `Array` to convert to string"
      Whitespace: "`{Integer|String}` Pretty-print with given number of spaces or string per indentation"
    description: |
      Convert `Dictionary`, `Collection`, or `Array` to JSON string.

  # ParseUrlEncoded
  - name: ParseUrlEncoded
    code: "ParseUrlEncoded(Value) {Dictionary}"
    details:
      Value: "`{String}` Url-Encoded value to parse"
    description: |
      Parse Url-Encoded value to `Dictionary`.

  # ConvertToUrlEncoded
  - name: ConvertToUrlEncoded
    code: "ConvertToUrlEncoded(Obj, [EncodingMode = FormUrlEncoding]) {String}"
    details:
      Obj: "`{Dictionary|Collection|Variant}` Value to convert to Url-Encoded string"
      EncodingMode: |
        `{UrlEncodingMode}` _Optional_ Default is `UrlEncodingMode.FormUrlEncoding`
    description: |
      Convert `Dictionary`/`Collection` to Url-Encoded string.

  # ParseXml
  - name: ParseXml
    code: "ParseXml(Value) {Dictionary}"
    details:
      Value: "`{String}` Encoded XML value to parse"
    description: |
      Parse XML value to `Dictionary`.

      _Note_ Currently, XML is not supported in 4.0.0 due to lack of Mac support.
      An updated parser is being created that supports Mac and Windows,
      but in order to avoid future breaking changes, `ParseXml` and `ConvertToXml` are not currently implemented.

      See [XML Support in 4.0](https://github.com/VBA-tools/VBA-Web/wiki/XML-Support-in-4.0) for details on how to use XML in Windows in the meantime.

  # ConvertToXml
  - name: ConvertToXml
    code: "ConvertToXml(Value) {String}"
    details:
      Value: "`Dictionary|Variant` XML"
    description: |
      Convert `Dictionary` to XML string.

      _Note_ Currently, XML is not supported in 4.0.0 due to lack of Mac support.
      An updated parser is being created that supports Mac and Windows,
      but in order to avoid future breaking changes, `ParseXml` and `ConvertToXml` are not currently implemented.

      See [XML Support in 4.0](https://github.com/VBA-tools/VBA-Web/wiki/XML-Support-in-4.0) for details on how to use XML in Windows in the meantime.

  # ParseByFormat
  - name: ParseByFormat
    code: "ParseByFormat(Value, Format, [CustomFormat], [Bytes]) {Object}"
    details:
      Value: "`{String}` Value to parse"
      Format: "`{WebFormat}`"
      CustomFormat: "`{String}` _Optional_ Name of registered custom converter"
      Bytes: "`{Variant}` _Optional_ Bytes for custom converter (if `ParseType = \"Binary\"`)"
    description: |
      Helper for parsing value to given `WebFormat` or custom format.
      Returns `Dictionary` or `Collection` based on given `Value`.

  # ConvertToFormat
  - name: ConvertToFormat
    code: "ConvertToFormat(Value, Format, [CustomFormat]) {String}"
    details:
      Value: "`{Dictionary|Collection|Variant}` `Dictionary`, `Collection`, or `Array` to convert to string"
      Format: "`{WebFormat}`"
      CustomFormat: "`{String}` _Optional_ Name of registered custom converter"
    description: |
      Helper for converting value to given `WebFormat` or custom format.

      _Note_ Only some converters handle `Collection` or `Array`.

  # UrlEncode
  - name: UrlEncode
    code: "UrlEncode(Text, [SpaceAsPlus = False], [EncodeUnsafe = True], [EncodingMode = StrictUrlEncoding]) {String}"
    details:
      Text: "`{Variant}` Text to encode"
      SpaceAsPlus: |
        `{Boolean}` _Optional_ Default is `False`

        DEPRECATED Use `EncodingMode:=FormUrlEncoding`
      EncodeUnsafe: |
        `{Boolean}` _Optional_ Default is `True`

        DEPRECATED This was based on an outdated URI spec and has since been removed.
          `EncodingMode:=CookieUrlEncoding` is the closest approximation of this behavior
      EncodingMode: |
        "`{UrlEncodingMode}` _Optional_ Default is `UrlEncodingMode.StrictUrlEncoding`"
    description: |
      Encode string for URLs ([Reference](http://www.blooberry.com/indexdot/html/topics/urlencoding.htm)).

  # UrlDecode
  - name: UrlDecode
    code: "UrlDecode(Encoded, [PlusAsSpace = True], [EncodingMode = StrictUrlEncoding]) {String}"
    details:
      Encoded: "`{String}` Text to decode"
      PlusAsSpace: |
        `{Boolean}` _Optional_ Default is `True`

        DEPRECATED Use `EncodingMode:=FormUrlEncoded` or `QueryUrlEncoding`
      EncodingMode: |
        "`{UrlEncodingMode}` _Optional_ Default is `UrlEncodingMode.StrictUrlEncoding`"
    description: |
      Decode Url-encoded string.

  # Base64Encode
  - name: Base64Encode
    code: "Base64Encode(Text) {String}"
    details:
      Text: "`{String}` Text to encode"
    description: |
      Base64-encode text.

  # Base64Decode
  - name: Base64Decode
    code: "Base64Decode(Encoded) {String}"
    details:
      Encoded: "`{String}` Text to decode"
    description: |
      Decode Base64-encoded text

  # RegisterConverter
  - name: RegisterConverter
    code: "RegisterConverter(Name, MediaType, ConvertCallback, ParseCallback, [Instance], [ParseType])"
    details:
      Name: "`{String}` Name of converter for use with `CustomRequestFormat` or `CustomResponseFormat`"
      MediaType: "`{String}` Media type to use for `Content-Type` and `Accept` headers"
      ConvertCallback: "`{String}` Global or object function name for converting"
      ParseCallback: "`{String}` Global or object function name for parsing"
      Instance: "`{Object}` _Optional_ Use instance methods for `ConvertCallback` and `ParseCallback`"
      ParseType: "`{String}` _Optional_ `\"String\"` (default) or `\"Binary\"` to pass raw binary response to `ParseCallback`"
    description: |
      Register custom converter for converting request `Body` and response `Content`.
      If the `ConvertCallback` or `ParseCallback` are object methods,
      pass in an object instance.
      If the `ParseCallback` needs the raw binary response value (e.g. file download),
      set `ParseType = "Binary"`, otherwise `"String"` is used.

      - `ConvertCallback` signature: `Function ...(Value As Variant) As String`
      - `ParseCallback` signature: `Function ...(Value As String) As Object`
    example: |
      ' 1. Use global module functions for Convert and Parse
      ' ---
      ' Module: CSVConverter
      Function ParseCSV(Value As String) As Object
        ' ...
      End Function
      Function ConvertToCSV(Value As Variant) As String
        ' ...
      End Function

      WebHelpers.RegisterConverter "csv", "text/csv", _
        "CSVConverter.ConvertToCSV", "CSVConverter.ParseCSV"

      ' 2. Use object instance functions for Convert and Parse
      ' ---
      ' Object: CSVConverterClass
      ' same as above...

      Dim Converter As New CSVConverterClass
      WebHelpers.RegisterConverter "csv", "text/csv", _
        "ConvertToCSV", "ParseCSV", Instance:=Converter

      ' 3. Pass raw binary value to ParseCallback
      ' ---
      ' Module: ImageConverter
      Function ParseImage(Bytes As Variant) As Object
        ' ...
      End Function
      Function ConvertToImage(Value As Variant) As String
        ' ...
      End Function

      WebHelpers.RegisterConverter "image", "image/jpeg", _
        "ImageConverter.ConvertToImage", "ImageConverter.ParseImage", _
        ParseType:="Binary"

  # JoinUrl
  - name: JoinUrl
    code: "JoinUrl(LeftSide, RightSide) {String}"
    details:
      LeftSide: "`{String}`"
      RightSide: "`{String}`"
    description: |
      Join two url parts, handling "/" in between them.
    example: |
      Debug.Print WebHelpers.JoinUrl("a/", "/b")
      Debug.Print WebHelpers.JoinUrl("a", "b")
      Debug.Print WebHelpers.JoinUrl("a/", "b")
      Debug.Print WebHelpers.JoinUrl("a", "/b")

  # UrlParts
  - name: UrlParts
    code: "UrlParts(Url) {Dictionary}"
    details:
      Url: "`{String}`"
    description: |
      Get relevant parts of the given url. Returns `Protocol`, `Host`, `Port`, `Path`, `Querystring`, and `Hash`.
    example: |
      WebHelpers.UrlParts "https://www.google.com/a/b/c.html?a=1&b=2#hash"
      ' -> Protocol = https
      '    Host = www.google.com
      '    Port = 443
      '    Path = /a/b/c.html
      '    Querystring = a=1&b=2
      '    Hash = hash

      WebHelpers.UrlParts "localhost:3000/a/b/c"
      ' -> Protocol = ""
      '    Host = localhost
      '    Port = 3000
      '    Path = /a/b/c
      '    Querystring = ""
      '    Hash = ""

  # CloneDictionary
  - name: CloneDictionary
    code: "CloneDictionary(Dict) {Dictionary}"
    details:
      Dict: "`{Dictionary}`"
    description: |
      Create a cloned copy of the `Dictionary`.
      This is not a deep copy, so children objects are copied by reference.

  # CloneCollection
  - name: CloneCollection
    code: "CloneCollection(Coll) {Collection}"
    details:
      Coll: "`{Collection}`"
    description: |
      Create a cloned copy of the `Collection`.
      This is not a deep copy, so children objects are copied by reference.

  # CreateKeyValue
  - name: CreateKeyValue
    code: "CreateKeyValue(Key, Value) {Dictionary}"
    details:
      Key: "`{String}`"
      Value: "`{Variant}`"
    description: |
      Helper for creating `Key-Value` pair with `Dictionary`.
      Used in `WebRequest`/`WebResponse` `Cookies`, `Headers`, and `QuerystringParams`
    example: |
      WebHelpers.CreateKeyValue "abc", 123
      ' -> {"Key": "abc", "Value": 123}

  # FindInKeyValues
  - name: FindInKeyValues
    code: "FindInKeyValues(KeyValues, Key) {Variant}"
    details:
      KeyValues: "`{Collection}` of `Key-Value`"
      Key: "`{Variant}`"
    description: |
      Search a `Collection` of `Key-Value` and retrieve the value for the given key.
    example: |
      Dim KeyValues As New Collection
      KeyValues.Add WebHelpers.CreateKeyValue("abc", 123)

      WebHelpers.FindInKeyValues KeyValues, "abc"
      ' -> 123

      WebHelpers.FindInKeyValues KeyValues, "unknown"
      ' -> Empty

  # AddOrReplaceInKeyValues
  - name: AddOrReplaceInKeyValues
    code: "AddOrReplaceInKeyValues(KeyValues, Key, Value)"
    details:
      KeyValues: "`{Collection}`"
      Key: "`{String}`"
      Value: "`{Variant}`"
    description: |
      Helper for adding/replacing `KeyValue` in `Collection` of `KeyValue`

      - Add if key not found
      - Replace if key is found
    example: |
      Dim KeyValues As New Collection
      KeyValues.Add WebHelpers.CreateKeyValue("a", 123)
      KeyValues.Add WebHelpers.CreateKeyValue("b", 456)
      KeyValues.Add WebHelpers.CreateKeyValue("c", 789)

      WebHelpers.AddOrReplaceInKeyValues KeyValues, "b", "abc"
      WebHelpers.AddOrReplaceInKeyValues KeyValues, "d", "def"

      ' -> [
      '      {"Key":"a","Value":123},
      '      {"Key":"b","Value":"abc"},
      '      {"Key":"c","Value":789},
      '      {"Key":"d","Value":"def"}
      '    ]

  # FormatToMediaType
  - name: FormatToMediaType
    code: "FormatToMediaType(Format, [CustomFormat]) {String}"
    details:
      Format: "`{WebFormat}`"
      CustomFormat: "`{String}` _Optional_ Needed if `Format = WebFormat.Custom`"
    description: |
      Get the media-type for the given format / custom format.

  # MethodToName
  - name: MethodToName
    code: "MethodToName(Method) {String}"
    details:
      Method: "`{WebMethod}`"
    description: |
      Get the method name for the given `WebMethod`
    example: |
      WebHelpers.MethodToName WebMethod.HttpPost
      ' -> "POST"

  # TimeoutTimerExpired
  - name: OnTimeoutTimerExpired
    code: "OnTimeoutTimerExpired()"
    internal: true

  # ExecuteInShell
  - name: ExecuteInShell
    code: "ExecuteInShell()"
    internal: true

  # PrepareTextForShell
  - name: PrepareTextForShell
    code: "PrepareTextForShell()"
    internal: true

  # HMACSHA1
  - name: HMACSHA1
    code: "HMACSHA1(Text, Secret, [Format]) {String}"
    details:
      Text: "`{String}`"
      Secret: "`{String}`"
      Format: "`{String}` _Optional_ `\"Hex\"` or `\"Base64\"` encoding for result"
    description: |
      Determine the HMAC for the given text and secret using the SHA1 hash algorithm.
    example: |
      WebHelpers.HMACSHA1 "Howdy!", "Secret"
      ' -> c8fdf74a9d62aa41ac8136a1af471cec028fb157

  # HMACSHA256
  - name: HMACSHA256
    code: "HMACSHA256(Text, Secret, [Format]) {String}"
    details:
      Text: "`{String}`"
      Secret: "`{String}`"
      Format: "`{String}` _Optional_ `\"Hex\"` or `\"Base64\"` encoding for result"
    description: |
      Determine the HMAC for the given text and secret using the SHA256 hash algorithm.
    example: |
      WebHelpers.HMACSHA256 "Howdy!", "Secret"
      ' -> fb5d65...

  # MD5
  - name: MD5
    code: "MD5(Text, [Format]) {String}"
    details:
      Text: "`{String}`"
      Format: "`{String}` _Optional_ `\"Hex\"` or `\"Base64\"` encoding for result"
    description: |
      Determine the MD5 hash of the given text.
    example: |
      WebHelpers.MD5 "Howdy!"
      ' -> 7105f32280940271293ee00ac97da5a7

  # CreateNonce
  - name: CreateNonce
    code: "CreateNonce([NonceLength])"
    details:
      NonceLength: "`{Integer}` _Optional_ Default is 32"
    description: |
      Create random alphanumeric nonce (0-9a-zA-Z)

  # StringToAnsiBytes
  - name: StringToAnsiBytes
    code: "StringToAnsiBytes(Text) {String}"
    internal: true
